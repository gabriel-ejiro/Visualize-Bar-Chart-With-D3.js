<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>D3.js Chart</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link rel="stylesheet" href="styles.css">
</head>

<body>
<script>
  <svg id="chart"></svg>
  <div id="tooltip" class="tooltip"></div>
# import d3.js library
<script src="https://d3js.org/d3.v7.min.js"></script>    

d3.json("https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json")
  .then(function(data){
   // Log the entire dataset to the console
  console.log(data);
   })
   // Extract the data array from the JSON object
   const dataArray = data.data;
 .catch(function(error) {

 // Handle any errors that may occur during data loading
 console.error("Error loading data:", error)});

// User Story #1: Chart Title

<div id="container">
  <h1 id="title">Gross Domestic Product (GDP) in the United States</h1>
  <!-- SVG container for the chart -->
  <svg id="chart"></svg>
</div>

# JavaScript (D3.js) for User Story #1

// Set up chart dimensions
const margin = { top: 20, right: 20, bottom: 50, left: 70 };
const width = 800 - margin.left - margin.right;
const height = 400 - margin.top - margin.bottom;

// Append SVG to the container
const svg = d3.select("#chart")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Set the chart title
d3.select("#title")
  .text("Gross Domestic Product (GDP) in the United States");

//  User Story #2

// Generate x-scale (for time)
const xScale = d3.scaleTime()
  .domain([d3.min(data, d => new Date(d[0])), d3.max(data, d => new Date(d[0]))])
  .range([0, width]);

// Generate x-axis
const xAxis = d3.axisBottom(xScale);

// Append x-axis to the SVG container
svg.append("g")
  .attr("id", "x-axis")
  .attr("transform", "translate(0," + height + ")")
  .call(xAxis);

// user story #3

// Generate y-scale (for GDP)
const yScale = d3.scaleLinear()
  .domain([0, d3.max(data, d => d[1])])
  .range([height, 0]);

// Generate y-axis
const yAxis = d3.axisLeft(yScale);

// Append y-axis to the SVG container
svg.append("g")
  .attr("id", "y-axis")
  .call(yAxis);

// user story #4

// Append x-axis to the SVG container
svg.append("g")
  .attr("id", "x-axis")
  .attr("transform", "translate(0," + height + ")")
  .call(xAxis);

// Append y-axis to the SVG container
svg.append("g")
  .attr("id", "y-axis")
  .call(yAxis);

// Add class "tick" to all tick labels on both axes
d3.selectAll("#x-axis .tick, #y-axis .tick")
  .classed("tick", true);

// user story 5

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", d => d[0]) // Set data-date attribute
  .attr("data-gdp", d => d[1]) // Set data-gdp attribute
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 6

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", d => d[0]) // Set data-date attribute
  .attr("data-gdp", d => d[1]) // Set data-gdp attribute
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 7

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", (d, i) => dataset[i][0]) // Set data-date attribute based on index
  .attr("data-gdp", d => d[1])
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 8

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", (d, i) => dataset[i][0])
  .attr("data-gdp", d => d[1]) // Set data-gdp attribute directly from the data
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// User story 9

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", (d, i) => dataset[i][0])
  .attr("data-gdp", d => d[1])
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1])) // Set the height of the bar based on GDP
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 10

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", (d, i) => dataset[i][0])
  .attr("data-gdp", d => d[1])
  .attr("x", d => xScale(parseTime(d[0]))) // Set the x-coordinate of the bar based on the date
  .attr("y", d => yScale(d[1]))
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 11

// Append a rect element for each data point
svg.selectAll("rect")
  .data(dataset)
  .enter()
  .append("rect")
  .attr("class", "bar")
  .attr("data-date", (d, i) => dataset[i][0])
  .attr("data-gdp", d => d[1])
  .attr("x", d => xScale(parseTime(d[0])))
  .attr("y", d => yScale(d[1])) // Set the y-coordinate of the bar based on the GDP value
  .attr("width", barWidth)
  .attr("height", d => height - yScale(d[1]))
  .attr("fill", "navy")
  .attr("transform", "translate(" + padding + "," + padding + ")");

// user story 12

// Create a tooltip element
var tooltip = d3.select("body")
  .append("div")
  .attr("id", "tooltip")
  .style("opacity", 0);

// Mouseover event handler for the bars
svg.selectAll(".bar")
  .on("mouseover", function(d) {
    var date = d[0];
    var gdp = d[1];
    tooltip.transition()
      .duration(200)
      .style("opacity", .9);
    tooltip.html("Date: " + date + "<br/>GDP: " + gdp)
      .attr("data-date", date)
      .style("left", (d3.event.pageX + 5) + "px")
      .style("top", (d3.event.pageY - 28) + "px");
  })
  .on("mouseout", function(d) {
    tooltip.transition()
      .duration(500)
      .style("opacity", 0);
  });

// user story 13

// Mouseover event handler for the bars
svg.selectAll(".bar")
  .on("mouseover", function(d) {
    var date = d[0];
    var gdp = d[1];
    tooltip.transition()
      .duration(200)
      .style("opacity", .9);
    tooltip.html("Date: " + date + "<br/>GDP: " + gdp)
      .attr("data-date", date) // Set data-date property
      .style("left", (d3.event.pageX + 5) + "px")
      .style("top", (d3.event.pageY - 28) + "px");
  })
  .on("mouseout", function(d) {
    tooltip.transition()
      .duration(500)
      .style("opacity", 0);
  });
<script src="script.js"></script>
</body>
</html>



